---
import Footer from "../components/Footer.astro";
import Form from "../components/Form.astro";
import Header from "../components/Header.astro";
import Playroom from "../components/Playroom.astro";
import Testimonials from "../components/Testimonials.astro";
import Lysetimorket from "../components/Lysetimorket.astro";
import Videosection from "../components/Videosection.astro";
import Button from "../components/Button.astro";
import "../styles/main.css";

const data = await fetch(
  "https://nmxufejdmiracytguxrn.supabase.co/rest/v1/Testamonial?order=id.desc&limit=4",
  {
    method: "GET",
    headers: {
      apikey:
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5teHVmZWpkbWlyYWN5dGd1eHJuIiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODIwMDU3OTYsImV4cCI6MTk5NzU4MTc5Nn0.a2xL0G56IugeAx-Ewwisrgmgx3nHh1T0MUmKHDuBQC4",
    },
  }
).then((res) => res.json());

console.log(data);
---

<!DOCTYPE html>
<html lang="da">
  <head>
    <meta charset="utf-8" />
    <link
      rel="icon"
      type="image/svg+xml"
      href="/svg/royalplayroom_s_logo.svg"
    />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Lyset i MÃ¸rket</title>
    <link rel="stylesheet" href="https://fonts.google.com/specimen/Barrio" />
  </head>
  <body>
    <div id="loader">
      <div class="loader">
        <script
          src="https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js"
        ></script>
        <lottie-player
          src="lottiefiles/loading-ikon.json"
          background="transparent"
          speed="1"
          style="width: 120px; height: 120px;"
          loop
          autoplay></lottie-player>
      </div>
    </div>
    <Header />
    <main>
      <Playroom />
      <div class="primarybg">
        <Lysetimorket />
        <Videosection />
        <div class="testimonial_grid">
          {
            data.map((Testimonial) => {
              return <Testimonials data={Testimonial} />;
            })
          }
        </div>
        <div class="readmore_testimonial">
          <Button
            type="buttonblack"
            href="/testimonials"
            text="Se alle anmeldelser her"
          />
        </div>
        <Form />
      </div>
      <Footer />
    </main>
  </body>

  <style>
    .readmore_testimonial {
      display: flex;
      justify-content: center;
      margin-bottom: 4rem;
    }

    @media (min-width: 600px) {
      .testimonial_grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
      }
    }

    .testimonial_grid {
      text-align: center;
      padding: 25px;
    }
    #loader {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #ffffff;
      z-index: 9999;
    }

    .loader {
      position: absolute;
      top: 45%;
      left: 45%;
    }
  </style>

  <script>
    window.addEventListener("load", function () {
      const loader = document.getElementById("loader");
      loader.style.display = "none";
    });

    class Login extends HTMLElement {
      constructor() {
        super();
        this.attachShadow({
          mode: "open",
        }); //apparently slots only work with the shadow dom?
      }
      connectedCallback() {
        this.html = `<style>
      /****** LOGIN MODAL ******/
      #login-modal {
          background:black;
          position:fixed;
          width:100vw;
          height:100vh;
      }
      .loginmodal-container {
        padding: 30px;
        max-width: 350px;
        width: 100% !important;
        background-color: #F7F7F7;
        margin: 0 auto;
        border-radius: 2px;
        box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
        overflow: hidden;
        font-family: -apple-system,system-ui,BlinkMacSystemFont,"Segoe UI","Roboto","Helvetica Neue", Arial, sans-serif;
      }
      .loginmodal-container h1 {
        text-align: center;
        font-size: 1.8em;
      }
      .loginmodal-container input[type=submit] {
        width: 100%;
        display: block;
        margin-bottom: 10px;
        position: relative;
      }
      input[type=password] {
        height: 44px;
        font-size: 16px;
        width: 100%;
        margin-bottom: 10px;
        -webkit-appearance: none;
        background: #fff;
        border: 1px solid #d9d9d9;
        border-top: 1px solid #c0c0c0;
        padding: 0 8px;
        box-sizing: border-box;
      }
      input[type=password]:hover {
        border: 1px solid #b9b9b9;
        border-top: 1px solid #a0a0a0;
        box-shadow: inset 0 1px 2px rgba(0,0,0,0.1);
      }
      .loginmodal {
        text-align: center;
        font-size: 14px;
        font-weight: 700;
        height: 36px;
        padding: 0 8px;
      }
      .loginmodal-submit {
        border: 0px;
        color: #fff;
        text-shadow: 0 1px rgba(0,0,0,0.1); 
        background-color: #4d90fe;
        padding: 17px 0px;
        font-size: 14px;
      }
      .loginmodal-submit:hover {
        border: 0px;
        text-shadow: 0 1px rgba(0,0,0,0.3);
        background-color: #357ae8;
      }
    </style>
    <div class="modal fade" id="login-modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="loginmodal-container">
          <h1>Login</h1><br>
          <p>This is a school project</p>
          <p>The password is <code>kea</code></p>
          <form>
            <input type="password" name="pass" placeholder="Password">
            <input type="submit" name="login" class="login loginmodal-submit" value="Login">
          </form>
        </div>
      </div>
    </div>`;
        this.render();

        this.shadowRoot
          .querySelector("form")
          .addEventListener("submit", (e) => {
            e.preventDefault();
            if (
              this.shadowRoot.querySelector("input[name=pass]").value === "kea"
            ) {
              document.querySelector("#totally-delete-me").remove();
              localStorage.setItem("iform-totally-logged-in", true);
            }
          });
      }
      render() {
        this.shadowRoot.innerHTML = this.html;
      }
    }
    customElements.define("iform-login", Login);
    window.addEventListener("load", () => {
      if (!localStorage.getItem("iform-totally-logged-in")) {
        const div = document.createElement("div");
        div.id = "totally-delete-me";
        div.style.width = "100vw";
        div.style.height = "100vh";
        div.style.position = "fixed";
        div.style.zIndex = "9999";

        div.innerHTML = "<iform-login />";
        document.body.prepend(div);
      }
    });
  </script>
</html>
